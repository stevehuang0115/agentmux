{
	"name": "Build Project Tasks",
	"description": "Complete process to generate detailed project tasks organized by milestone phases",
	"steps": [
		{
			"id": 1,
			"name": "Create Milestone Structure and Task Files",
			"targetRole": "tpm",
			"delayMinutes": 10,
			"verification": {
				"type": "milestone_subdirs_contain_files",
				"path": "{PROJECT_PATH}/.agentmux/tasks",
				"min_files_per_subdir": 2,
				"file_pattern": "*.md"
			},
			"prompts": [
				"PRODUCT MANAGER BRIEFING - CREATE COMPLETE TASK STRUCTURE",
				"Project: {PROJECT_NAME}",
				"Path: {PROJECT_PATH}",
				"",
				"PROJECT GOAL:",
				"{INITIAL_GOAL}",
				"",
				"USER JOURNEY:",
				"{USER_JOURNEY}",
				"",
				"## Task 1: Analyze Project Specifications for Feature-Based Organization",
				"First, review all specification files in {PROJECT_PATH}/.agentmux/specs/ to understand:",
				"",
				"### Required Analysis:",
				"1. **Core Features Identification** (from project.md):",
				"   - List all major features (e.g., authentication, user management, payments, notifications)",
				"   - Identify feature dependencies and relationships",
				"   - Determine feature complexity and priority",
				"   - Map features to user journey stages",
				"",
				"2. **Technology Stack Analysis** (from *_design.md files):",
				"   - Frontend technologies (Web: React/Vue/Angular, Mobile: iOS/Android, Desktop: Electron/Native)",
				"   - Backend technologies (API, Database, Services, Infrastructure)",
				"   - Integration requirements (External APIs, Third-party services)",
				"   - Development and deployment platforms",
				"",
				"3. **Feature Scope & Boundaries** (from all spec files):",
				"   - Define clear boundaries for each feature",
				"   - Identify shared components and utilities",
				"   - Determine cross-platform requirements",
				"   - Map testing requirements per feature and platform",
				"",
				"## Task 2: Create Feature-Based and Platform-Specific Milestone Structure",
				"Based on your analysis, create milestone directories organized by features and platforms under {PROJECT_PATH}/.agentmux/tasks/",
				"",
				"### Create Tasks Directory",
				"```bash",
				"mkdir -p {PROJECT_PATH}/.agentmux/tasks",
				"```",
				"",
				"### Milestone Organization Strategy",
				"Create milestone directories using feature-based and platform-specific naming: `m[number]_[feature/area]_[platform]`",
				"",
				"**Each milestone must include task status folders:**",
				"- `open/` - New tasks ready to be assigned",
				"- `in_progress/` - Tasks currently being worked on",
				"- `blocked/` - Tasks that are blocked by dependencies",
				"- `done/` - Completed tasks",
				"",
				"### Foundation & Infrastructure Milestones (Always Required):",
				"```bash",
				"mkdir -p {PROJECT_PATH}/.agentmux/tasks/m1_foundation_setup/{open,in_progress,blocked,done}",
				"mkdir -p {PROJECT_PATH}/.agentmux/tasks/m2_infrastructure_backend/{open,in_progress,blocked,done}",
				"mkdir -p {PROJECT_PATH}/.agentmux/tasks/m3_infrastructure_frontend/{open,in_progress,blocked,done}",
				"```",
				"",
				"### Feature-Based Milestones (Create based on your feature analysis):",
				"",
				"**Authentication & User Management:**",
				"```bash",
				"mkdir -p {PROJECT_PATH}/.agentmux/tasks/m4_auth_backend/{open,in_progress,blocked,done}",
				"mkdir -p {PROJECT_PATH}/.agentmux/tasks/m5_auth_web/{open,in_progress,blocked,done}",
				"mkdir -p {PROJECT_PATH}/.agentmux/tasks/m6_auth_mobile/{open,in_progress,blocked,done}  # If mobile app exists",
				"```",
				"",
				"**Core Business Features (Adapt to your project):**",
				"```bash",
				"# Payment System Example",
				"mkdir -p {PROJECT_PATH}/.agentmux/tasks/m7_payments_backend/{open,in_progress,blocked,done}",
				"mkdir -p {PROJECT_PATH}/.agentmux/tasks/m8_payments_web/{open,in_progress,blocked,done}",
				"mkdir -p {PROJECT_PATH}/.agentmux/tasks/m9_payments_mobile/{open,in_progress,blocked,done}",
				"",
				"# User Dashboard Example",
				"mkdir -p {PROJECT_PATH}/.agentmux/tasks/m10_dashboard_backend/{open,in_progress,blocked,done}",
				"mkdir -p {PROJECT_PATH}/.agentmux/tasks/m11_dashboard_web/{open,in_progress,blocked,done}",
				"",
				"# Notifications Example",
				"mkdir -p {PROJECT_PATH}/.agentmux/tasks/m12_notifications_backend/{open,in_progress,blocked,done}",
				"mkdir -p {PROJECT_PATH}/.agentmux/tasks/m13_notifications_web/{open,in_progress,blocked,done}",
				"mkdir -p {PROJECT_PATH}/.agentmux/tasks/m14_notifications_mobile/{open,in_progress,blocked,done}",
				"```",
				"",
				"**Integration & Testing Milestones:**",
				"```bash",
				"mkdir -p {PROJECT_PATH}/.agentmux/tasks/m15_integration_api/{open,in_progress,blocked,done}",
				"mkdir -p {PROJECT_PATH}/.agentmux/tasks/m16_testing_backend/{open,in_progress,blocked,done}",
				"mkdir -p {PROJECT_PATH}/.agentmux/tasks/m17_testing_frontend/{open,in_progress,blocked,done}",
				"mkdir -p {PROJECT_PATH}/.agentmux/tasks/m18_testing_e2e/{open,in_progress,blocked,done}",
				"```",
				"",
				"**Deployment Milestones:**",
				"```bash",
				"mkdir -p {PROJECT_PATH}/.agentmux/tasks/m19_deployment_backend/{open,in_progress,blocked,done}",
				"mkdir -p {PROJECT_PATH}/.agentmux/tasks/m20_deployment_frontend/{open,in_progress,blocked,done}",
				"mkdir -p {PROJECT_PATH}/.agentmux/tasks/m21_deployment_mobile/{open,in_progress,blocked,done}  # If mobile app exists",
				"```",
				"",
				"### Platform-Specific Guidelines:",
				"**Multi-Platform Projects:** Create separate milestones for each platform (web, mobile, desktop)",
				"**Full-Stack Projects:** Separate backend and frontend milestones for each feature",
				"**Microservices:** Create separate milestones for each service/feature boundary",
				"**Mobile Apps:** Include platform-specific milestones (iOS, Android, or cross-platform)",
				"",
				"## Task 3: Create Detailed Task Files Within Each Milestone",
				"",
				"After creating the milestone directory structure, immediately create individual task markdown files within each milestone directory.",
				"",
				"### Task File Organization",
				"**Within each milestone's `open/` directory (m1_*/open/, m2_*/open/, etc.), create task files using this naming convention:**",
				"- `01_task_name.md`",
				"- `02_task_name.md`",
				"- `03_task_name.md`",
				"",
				"**Important:** All new tasks must be created in the `open/` subfolder. Tasks will be moved to `in_progress/`, `blocked/`, or `done/` folders as they progress through the workflow.",
				"",
				"### Standard Milestone Content Guidelines:",
				"",
				"**m1_foundation/** (Project setup and infrastructure)",
				"- Environment setup and tooling configuration",
				"- Project structure and build system setup",
				"- Core dependencies and framework installation",
				"- Development environment validation",
				"",
				"**m2_core_development/** (Main application logic)",
				"- Core business logic implementation",
				"- Data models and persistence layer",
				"- Main application features and workflows",
				"- Basic API endpoints or core functionality",
				"",
				"**m3_integration/** (System integration and connections)",
				"- Frontend-backend integration",
				"- External API integrations",
				"- Database integration and data flow",
				"- Inter-component communication",
				"",
				"**m4_testing_qa/** (Quality assurance and testing)",
				"- Unit test implementation",
				"- Integration test development",
				"- End-to-end testing setup",
				"- Quality validation and bug fixes",
				"",
				"**m5_deployment/** (Production readiness)",
				"- Production configuration setup",
				"- Deployment pipeline creation",
				"- Monitoring and logging implementation",
				"- Launch preparation and validation",
				"",
				"### Granular Task File Template",
				"**Each task file must follow this comprehensive structure for maximum granularity:**",
				"",
				"```markdown",
				"# [Milestone].[Task Number]: [Specific Task Title]",
				"",
				"## Objective",
				"**Single, focused responsibility** - What exactly this task accomplishes (one specific feature/component/function)",
				"",
				"## Scope Boundaries",
				"**What this task DOES include:**",
				"- [ ] Specific files to be created/modified",
				"- [ ] Exact functionality to be implemented",
				"- [ ] Specific API endpoints or UI components",
				"",
				"**What this task DOES NOT include:**",
				"- [ ] Features left for other tasks",
				"- [ ] Integration points handled elsewhere",
				"- [ ] Future enhancements out of scope",
				"",
				"## Prerequisites",
				"**Required for this task to start:**",
				"- [ ] Specific previous tasks (by milestone.task ID)",
				"- [ ] Required tools/libraries installed",
				"- [ ] Environment setup completed",
				"- [ ] Dependencies from other milestone areas",
				"",
				"## Acceptance Criteria",
				"**Specific, testable outcomes:**",
				"- [ ] **Functional**: [Specific feature works as described]",
				"- [ ] **Technical**: [Code meets quality standards]",
				"- [ ] **Testing**: [All tests pass with X% coverage]",
				"- [ ] **Performance**: [Meets specific performance criteria]",
				"- [ ] **Security**: [Security requirements satisfied]",
				"- [ ] **Integration**: [Works with existing system components]",
				"",
				"## Granular Implementation Steps",
				"**Break implementation into smallest possible increments:**",
				"",
				"### Phase 1: Setup and Structure (15-30 min)",
				"1. **File Creation**:",
				"   ```bash",
				"   # Exact commands to run",
				"   mkdir -p [specific-directory]",
				"   touch [specific-files.ext]",
				"   ```",
				"2. **Initial Structure**:",
				"   - Create basic file structure",
				"   - Add minimal interface/type definitions",
				"   - Set up imports and exports",
				"",
				"3. **Configuration Setup**:",
				"   - Add necessary configuration",
				"   - Update package.json if needed",
				"   - Configure build settings",
				"",
				"### Phase 2: Core Implementation (45-90 min)",
				"1. **Primary Logic**:",
				"   ```typescript",
				"   // Example of specific code to implement",
				"   export interface SpecificInterface {",
				"     property: string;",
				"   }",
				"   ```",
				"",
				"2. **Business Logic**:",
				"   - Implement core functionality",
				"   - Add error handling",
				"   - Validate input parameters",
				"",
				"3. **Integration Points**:",
				"   - Connect with existing services",
				"   - Add necessary API calls",
				"   - Handle data transformation",
				"",
				"### Phase 3: Testing Implementation (30-60 min)",
				"1. **Unit Test Setup**:",
				"   - Create test file: `[component].test.[ts|tsx]`",
				"   - Mock external dependencies",
				"   - Set up test data fixtures",
				"",
				"2. **Test Implementation**:",
				"   - Write tests for happy path scenarios",
				"   - Add edge case testing",
				"   - Test error conditions",
				"",
				"3. **Integration Testing**:",
				"   - Test component integration",
				"   - Verify API endpoints",
				"   - Test data flow",
				"",
				"## Comprehensive Testing Plan",
				"**Testing must be as granular as implementation:**",
				"",
				"### Unit Tests (Required)",
				"- [ ] **Happy Path**: Test normal operation with valid inputs",
				"- [ ] **Edge Cases**: Test boundary conditions and limits",
				"- [ ] **Error Handling**: Test invalid inputs and error scenarios",
				"- [ ] **Mocking**: Mock all external dependencies",
				"- [ ] **Coverage**: Achieve minimum 85% code coverage",
				"",
				"**Specific Test Cases to Implement:**",
				"```typescript",
				"describe('[ComponentName]', () => {",
				"  it('should [specific behavior 1]', () => { });",
				"  it('should [specific behavior 2]', () => { });",
				"  it('should handle [specific error condition]', () => { });",
				"});",
				"```",
				"",
				"### Integration Tests (Required)",
				"- [ ] **API Integration**: Test with actual API calls",
				"- [ ] **Database Integration**: Test data persistence",
				"- [ ] **Service Integration**: Test with other system components",
				"- [ ] **End-to-End Flow**: Test complete user workflows",
				"",
				"### Manual Testing Checklist",
				"**Step-by-step verification:**",
				"1. [ ] **Smoke Test**: Basic functionality works",
				"2. [ ] **User Flow**: Complete user journey works",
				"3. [ ] **Cross-Browser**: Works in target browsers (if frontend)",
				"4. [ ] **Performance**: Meets response time requirements",
				"5. [ ] **Accessibility**: Meets accessibility standards",
				"6. [ ] **Mobile Responsiveness**: Works on mobile devices (if applicable)",
				"",
				"## Quality Gates",
				"**All must pass before task completion:**",
				"- [ ] **Build**: TypeScript compilation successful",
				"- [ ] **Lint**: ESLint passes with zero warnings",
				"- [ ] **Tests**: 100% test suite passes",
				"- [ ] **Coverage**: Meets minimum coverage threshold",
				"- [ ] **Security**: Security scan passes",
				"- [ ] **Performance**: Meets performance benchmarks",
				"- [ ] **Code Review**: Peer review completed and approved",
				"",
				"## Definition of Done",
				"**Task is only complete when ALL criteria are met:**",
				"- [ ] **Code**: All implementation completed as specified",
				"- [ ] **Tests**: All testing requirements satisfied",
				"- [ ] **Documentation**: Code comments and API docs updated",
				"- [ ] **Integration**: Successfully integrates with existing system",
				"- [ ] **Deployment**: Can be deployed without breaking existing features",
				"- [ ] **Rollback**: Rollback plan documented and tested",
				"- [ ] **Monitoring**: Logging and monitoring implemented",
				"",
				"## Risk Mitigation",
				"- **Technical Risks**: [Specific risks and mitigation strategies]",
				"- **Integration Risks**: [Dependencies and fallback plans]",
				"- **Performance Risks**: [Performance bottlenecks and solutions]",
				"",
				"## Estimated Time Breakdown",
				"- **Setup**: [X minutes]",
				"- **Implementation**: [X minutes]",
				"- **Testing**: [X minutes]",
				"- **Integration**: [X minutes]",
				"- **Total**: [X hours] (Maximum 4 hours for any single task)",
				"",
				"## Priority: [Critical/High/Medium/Low]",
				"## Platform: [Web/Mobile/Desktop/Backend/Database/DevOps]",
				"## Feature Area: [Authentication/Payment/Dashboard/etc.]",
				"## Dependencies: [List specific milestone.task IDs this depends on]",
				"## Blocks: [List specific milestone.task IDs that depend on this]",
				"```",
				"",
				"## COMPLETE TASK CREATION PROCESS",
				"",
				"**Step-by-step execution:**",
				"1. **First**: Create all feature-based milestone directories based on project complexity analysis",
				"2. **Then**: Create 3-8 granular task files per milestone in each `open/` directory",
				"3. **Finally**: Verify all tasks have clear dependencies and sequencing",
				"",
				"**GRANULAR TASK REQUIREMENTS:**",
				"- ✅ **Maximum Task Size**: No task should exceed 4 hours total time",
				"- ✅ **Single Responsibility**: Each task handles only one specific feature/component",
				"- ✅ **Platform Separation**: Backend, frontend, mobile tasks are separate",
				"- ✅ **Feature Isolation**: Authentication separate from payments, etc.",
				"- ✅ **Testing Mandatory**: Every task must include comprehensive testing plan",
				"- ✅ **Scope Boundaries**: Clear definition of what each task includes/excludes",
				"- ✅ **Quality Gates**: All tasks must pass build/lint/test/coverage requirements",
				"",
				"**GRANULAR TASK EXAMPLES:**",
				"",
				"### Authentication Feature Examples:",
				"",
				"**Backend Authentication Tasks:**",
				"- `01_setup_auth_database_schema.md` - Create user tables, indexes, constraints (2 hours)",
				"- `02_implement_password_hashing_service.md` - Bcrypt service with salt generation (1.5 hours)", 
				"- `03_create_jwt_token_service.md` - JWT generation, validation, refresh logic (2 hours)",
				"- `04_build_user_registration_endpoint.md` - POST /api/auth/register with validation (2.5 hours)",
				"- `05_build_user_login_endpoint.md` - POST /api/auth/login with rate limiting (2 hours)",
				"- `06_implement_password_reset_flow.md` - Email-based password reset (3 hours)",
				"- `07_add_auth_middleware.md` - JWT verification middleware for protected routes (1.5 hours)",
				"- `08_create_user_profile_endpoints.md` - GET/PUT /api/user/profile (2 hours)",
				"",
				"**Frontend Authentication Tasks:**",
				"- `01_create_login_form_component.md` - React form with validation (2 hours)",
				"- `02_create_registration_form_component.md` - React form with real-time validation (2.5 hours)",
				"- `03_implement_auth_context_provider.md` - Global auth state management (2 hours)",
				"- `04_create_protected_route_component.md` - Route wrapper for authenticated pages (1.5 hours)",
				"- `05_build_password_reset_flow.md` - Request and reset password forms (3 hours)",
				"- `06_implement_token_refresh_logic.md` - Automatic token refresh mechanism (2 hours)",
				"- `07_create_user_profile_page.md` - Profile display and edit functionality (3 hours)",
				"- `08_add_logout_functionality.md` - Logout button and cleanup (1 hour)",
				"",
				"**Mobile Authentication Tasks:**",
				"- `01_create_mobile_login_screen.md` - React Native login screen (2.5 hours)",
				"- `02_create_mobile_register_screen.md` - React Native registration screen (2.5 hours)",
				"- `03_implement_biometric_auth.md` - Fingerprint/Face ID integration (3.5 hours)",
				"- `04_add_secure_token_storage.md` - Keychain/Keystore integration (2 hours)",
				"- `05_create_mobile_profile_screen.md` - Profile management screen (3 hours)",
				"",
				"### Payment Feature Examples:",
				"",
				"**Backend Payment Tasks:**",
				"- `01_setup_stripe_integration.md` - Stripe API client configuration (1.5 hours)",
				"- `02_create_payment_intent_endpoint.md` - POST /api/payments/intent (2 hours)",
				"- `03_implement_webhook_handler.md` - Stripe webhook processing (2.5 hours)",
				"- `04_create_subscription_management.md` - Subscription CRUD operations (3 hours)",
				"- `05_build_invoice_generation.md` - PDF invoice creation (2.5 hours)",
				"",
				"**Frontend Payment Tasks:**",
				"- `01_integrate_stripe_elements.md` - Payment form with Stripe Elements (3 hours)",
				"- `02_create_pricing_page.md` - Subscription plans display (2 hours)",
				"- `03_build_checkout_flow.md` - Multi-step checkout process (3.5 hours)",
				"- `04_create_billing_history_page.md` - Payment history and invoices (2.5 hours)",
				"",
				"### Dashboard Feature Examples:",
				"",
				"**Backend Dashboard Tasks:**",
				"- `01_create_analytics_aggregation_service.md` - Daily/weekly/monthly stats (2.5 hours)",
				"- `02_build_dashboard_data_endpoints.md` - GET /api/dashboard/* routes (2 hours)",
				"- `03_implement_real_time_updates.md` - WebSocket dashboard updates (3 hours)",
				"",
				"**Frontend Dashboard Tasks:**",
				"- `01_create_dashboard_layout_component.md` - Main dashboard structure (2 hours)",
				"- `02_build_analytics_charts_component.md` - Charts.js integration (3 hours)",
				"- `03_create_widget_system.md` - Draggable dashboard widgets (4 hours)",
				"- `04_implement_real_time_updates.md` - WebSocket client integration (2.5 hours)",
				"",
				"**Task Management Workflow:**",
				"1. Create all new tasks in `milestone_name/open/` directories",
				"2. When a task is assigned to a team member, it moves to `milestone_name/in_progress/`",
				"3. If a task gets blocked, it moves to `milestone_name/blocked/`",
				"4. When completed, tasks move to `milestone_name/done/`",
				"",
				"**CRITICAL SUCCESS FACTORS:**",
				"- **Granularity**: Break every feature into smallest possible tasks (max 4 hours each)",
				"- **Platform Separation**: Never mix frontend, backend, mobile, or DevOps in same task",
				"- **Feature Isolation**: Each major feature (auth, payments, etc.) has separate milestone",
				"- **Testing Integration**: Every single task includes comprehensive testing requirements",
				"- **Clear Boundaries**: Explicitly define what each task includes AND excludes",
				"- **Dependency Mapping**: Clear prerequisites and blocking relationships between tasks",
				"- **Quality Gates**: Mandatory build, lint, test, and coverage requirements for every task",
				"",
				"**Execute the complete process now: Create feature-based milestone structure AND populate with granular task files based on your project specification analysis.**"
			]
		}
	],
	"workflow": {
		"step1": "Complete task structure creation: Analyze specifications, create milestone directories, and populate with detailed task files"
	},
	"expectedDeliverables": {
		"prerequisites": ["Project specifications must exist in .agentmux/specs/ directory"],
		"step1": [
			"Feature-based milestone directories created under .agentmux/tasks/",
			"Directory naming: m[#]_[feature]_[platform] (e.g., m4_auth_backend, m5_auth_web, m6_auth_mobile)",
			"5-15 feature-based milestone directories based on project complexity analysis",
			"3-8 granular task files per milestone directory (maximum 4 hours per task)",
			"Each task file includes: single-focused objective, scope boundaries, granular implementation steps, comprehensive testing plan, quality gates",
			"Task files follow enhanced template for maximum granularity and developer success",
			"Platform separation: backend, frontend, mobile, desktop, DevOps tasks in separate milestones",
			"Feature isolation: authentication, payments, dashboard, notifications in separate milestone groups",
			"Clear dependency mapping between milestones and individual tasks"
		],
		"quality_standards": [
			"Tasks organized by features (authentication, payments, etc.) with platform separation",
			"Maximum task size: 4 hours total implementation time",
			"Each task has single responsibility and clear scope boundaries",
			"Comprehensive testing plan included in every single task",
			"Quality gates (build, lint, test, coverage) mandatory for every task",
			"Dependencies between tasks clearly mapped and documented",
			"Implementation steps broken into smallest possible increments",
			"Platform-specific tasks properly separated and organized"
		],
		"notes": [
			"This workflow assumes specifications already exist in .agentmux/specs/",
			"Milestone structure adapts to project features and platforms (5-15 milestones typical)",
			"Single comprehensive step combines feature analysis, directory creation, and granular task generation",
			"Tasks organized by: Feature Area > Platform > Individual Granular Tasks",
			"Verification ensures both feature-based directory structure AND granular task files are created",
			"Each task must be completable by a single developer in one focused work session",
			"Testing requirements are integrated into every task, not separate milestones"
		]
	}
}
