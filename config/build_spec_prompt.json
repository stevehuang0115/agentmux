{
	"name": "Build Project Specifications",
	"description": "Step-by-step process to generate project specifications in three focused phases. These specifications will be used to create milestone-based tasks organized in open/in_progress/blocked/done folders.",
	"steps": [
		{
			"id": 1,
			"name": "Create Project Requirements Document",
			"targetRole": "tpm",
			"delayMinutes": 3,
			"verification": {
				"type": "files_exist",
				"paths": [
					"{PROJECT_PATH}/.agentmux/specs",
					"{PROJECT_PATH}/.agentmux/specs/project.md"
				]
			},
			"prompts": [
				"PROJECT REQUIREMENTS DOCUMENT - STEP 1",
				"Project: {PROJECT_NAME}",
				"Path: {PROJECT_PATH}",
				"",
				"PROJECT GOAL:",
				"{INITIAL_GOAL}",
				"",
				"USER JOURNEY:",
				"{USER_JOURNEY}",
				"",
				"## Task: Create Project Requirements Document (PRD)",
				"",
				"### Step 1: Directory Setup",
				"Create the specifications directory:",
				"```bash",
				"mkdir -p {PROJECT_PATH}/.agentmux/specs",
				"```",
				"",
				"### Step 2: Create project.md",
				"Create a comprehensive Product Requirements Document at: `{PROJECT_PATH}/.agentmux/specs/project.md`",
				"",
				"**Required sections for project.md:**",
				"",
				"```markdown",
				"# {PROJECT_NAME} - Product Requirements Document",
				"",
				"## Project Overview",
				"- Project description and purpose",
				"- Key objectives and success metrics",
				"- Target audience and stakeholders",
				"",
				"## Business Requirements",
				"- Core business goals and value proposition",
				"- User needs and pain points addressed",
				"- Success criteria and KPIs",
				"",
				"## Functional Requirements",
				"- Detailed feature specifications",
				"- User stories and acceptance criteria",
				"- Core workflows and user interactions",
				"",
				"## Non-Functional Requirements",
				"- Performance requirements",
				"- Security and compliance needs",
				"- Scalability and reliability standards",
				"",
				"## Technical Constraints",
				"- Technology stack preferences",
				"- Infrastructure limitations",
				"- Integration requirements",
				"",
				"## Project Scope",
				"- In-scope features and deliverables",
				"- Out-of-scope items",
				"- Future enhancements and roadmap",
				"",
				"## Success Metrics",
				"- Measurable outcomes and KPIs",
				"- User satisfaction criteria",
				"- Business impact measurements",
				"```",
				"",
				"**Focus on creating a comprehensive PRD that captures all business and functional requirements based on the project goal and user journey provided above.**"
			]
		},
		{
			"id": 2,
			"name": "Create Technical Design Documentation",
			"targetRole": "architect",
			"delayMinutes": 6,
			"conditional": "only_if_project_md_exists",
			"verification": {
				"type": "directory_contains_files",
				"path": "{PROJECT_PATH}/.agentmux/specs",
				"min_files": 2,
				"file_pattern": "*_design.md"
			},
			"prompts": [
				"TECHNICAL DESIGN DOCUMENTATION - STEP 2",
				"",
				"PROJECT GOAL:",
				"{INITIAL_GOAL}",
				"",
				"USER JOURNEY:",
				"{USER_JOURNEY}",
				"",
				"## Task: Create Technical Design Documentation",
				"",
				"Based on the project requirements in project.md, analyze what technical design documents are needed and create them.",
				"",
				"### Technical Design Analysis",
				"Review the project.md file and determine which technical components require design documentation:",
				"",
				"**Available Design Document Types:**",
				"- **frontend_design.md** - UI/UX components, user interface architecture, frontend frameworks",
				"- **backend_design.md** - Server architecture, business logic, data processing, APIs",
				"- **api_design.md** - REST/GraphQL API specifications, endpoints, data contracts",
				"- **database_design.md** - Data models, schemas, relationships, storage strategy",
				"- **mobile_design.md** - Mobile app architecture, native/hybrid approach, platform-specific features",
				"- **genai_design.md** - AI/ML integration, LLM usage, prompt engineering, model selection",
				"- **technical_design.md** - General technical architecture for simpler projects",
				"",
				"### Design Document Requirements",
				"**Choose 2-4 design documents** that best fit this project's technical needs and create them in `{PROJECT_PATH}/.agentmux/specs/`",
				"",
				"**Each design document must include:**",
				"",
				"```markdown",
				"# [Component] Design Document",
				"",
				"## Architecture Overview",
				"- High-level system architecture",
				"- Component interactions and data flow",
				"- Technology stack and frameworks",
				"",
				"## Detailed Design",
				"- Core components and their responsibilities",
				"- Data structures and models",
				"- Key algorithms and business logic",
				"",
				"## Implementation Strategy",
				"- Development approach and patterns",
				"- Code organization and structure",
				"- Dependencies and third-party integrations",
				"",
				"## Security Considerations",
				"- Authentication and authorization",
				"- Data protection and encryption",
				"- Security best practices",
				"",
				"## Performance & Scalability",
				"- Performance requirements and optimization",
				"- Caching strategies",
				"- Scalability considerations",
				"",
				"## Integration Points",
				"- External system integrations",
				"- API contracts and data exchange",
				"- Communication protocols",
				"```",
				"",
				"**IMPORTANT CONSTRAINTS:**",
				"- ❌ DO NOT create subdirectories under specs/",
				"- ✅ Place ALL design files directly in specs/ folder",
				"- ✅ Use descriptive file names ending with _design.md",
				"- ✅ Focus on comprehensive technical specifications",
				"",
				"**Create the appropriate technical design documents now based on your analysis of the project requirements.**"
			]
		},
		{
			"id": 3,
			"name": "Create Integration & E2E Testing Plan",
			"targetRole": "architect",
			"delayMinutes": 4,
			"conditional": "only_if_design_docs_exist",
			"verification": {
				"type": "files_exist",
				"paths": ["{PROJECT_PATH}/.agentmux/specs/integration_tests.md"]
			},
			"prompts": [
				"INTEGRATION & E2E TESTING PLAN - STEP 3",
				"",
				"PROJECT GOAL:",
				"{INITIAL_GOAL}",
				"",
				"USER JOURNEY:",
				"{USER_JOURNEY}",
				"",
				"## Task: Create Comprehensive Integration & E2E Testing Plan",
				"",
				"Based on the project requirements (project.md), user journey, and technical design documents (*_design.md), create a comprehensive integration and end-to-end testing plan.",
				"",
				"### Create integration_tests.md",
				"Create the file at: `{PROJECT_PATH}/.agentmux/specs/integration_tests.md`",
				"",
				"**Required sections for integration_tests.md:**",
				"",
				"```markdown",
				"# {PROJECT_NAME} - Integration & E2E Testing Plan",
				"",
				"## Testing Overview",
				"- Testing strategy and approach",
				"- Scope of integration and E2E testing",
				"- Testing environment requirements",
				"- Technology stack for testing (specify tools and frameworks)",
				"",
				"## End-to-End (E2E) Testing",
				"**Based on the user journey provided, create comprehensive E2E test scenarios:**",
				"- Complete user workflow testing from start to finish",
				"- Critical user path validation",
				"- Cross-browser and cross-device testing (if web application)",
				"- User acceptance criteria validation",
				"- Technology selection for E2E testing (e.g., Playwright for web apps, Appium for mobile, etc.)",
				"- Test environment setup and configuration",
				"- Test data preparation and cleanup strategies",
				"",
				"## System Integration Tests",
				"- Component integration scenarios",
				"- Data flow validation tests",
				"- Service-to-service communication testing",
				"- Microservices integration patterns",
				"",
				"## API Integration Tests",
				"- Endpoint testing and validation",
				"- Request/response contract testing",
				"- Error handling and edge cases",
				"- API versioning and backward compatibility",
				"- Technology selection for API testing (e.g., Postman, REST Assured, Supertest, etc.)",
				"",
				"## Database Integration Tests",
				"- Data persistence validation",
				"- Transaction integrity testing",
				"- Data migration and schema tests",
				"- Database performance under load",
				"",
				"## External System Integration",
				"- Third-party service integration tests",
				"- Mock service testing strategies",
				"- Fallback and resilience testing",
				"- Network failure simulation",
				"",
				"## Performance Integration Tests",
				"- Load testing scenarios",
				"- Stress testing parameters",
				"- Performance benchmarks and thresholds",
				"- Technology selection for performance testing (e.g., JMeter, K6, Artillery, etc.)",
				"",
				"## Security Integration Tests",
				"- Authentication flow testing",
				"- Authorization and access control tests",
				"- Data security and encryption validation",
				"- Vulnerability scanning and penetration testing",
				"",
				"## Test Automation Strategy",
				"- Automated test framework selection with specific technologies",
				"- CI/CD integration requirements",
				"- Test data management and setup",
				"- Test execution environment (Docker, cloud services, etc.)",
				"- Reporting and monitoring tools",
				"",
				"## User Journey-Based Test Scenarios",
				"**Create detailed test cases based on the user journey:**",
				"- Step-by-step user workflow validation",
				"- Happy path scenarios with expected outcomes",
				"- Alternative path scenarios and error handling",
				"- Edge cases and boundary conditions",
				"- User experience validation points",
				"",
				"## Test Execution Plan",
				"- Test execution sequence and dependencies",
				"- Parallel vs sequential test execution strategy",
				"- Test environment provisioning and teardown",
				"- Test data lifecycle management",
				"",
				"## Success Criteria",
				"- Test coverage requirements (minimum percentages)",
				"- Pass/fail criteria for each test type",
				"- Quality gates and acceptance thresholds",
				"- Performance benchmarks and SLA requirements",
				"- User experience validation criteria",
				"```",
				"",
				"**IMPORTANT REQUIREMENTS:**",
				"- ✅ Base E2E tests primarily on the user journey provided in the project requirements",
				"- ✅ Include specific testing technology recommendations (e.g., Playwright, Cypress, Selenium for web; Appium for mobile; Postman/Newman for APIs)",
				"- ✅ Consider that the TPM (Technical Project Manager) tmux session will evaluate and execute these tests",
				"- ✅ Provide clear technology selection rationale for different types of testing",
				"- ✅ Include both automated and manual testing strategies where appropriate",
				"",
				"**Focus on creating comprehensive integration and E2E tests that validate the complete user journey and all technical components identified in the previous steps.**"
			]
		}
	],
	"workflow": {
		"step1": "Create comprehensive project requirements document (PRD)",
		"step2": "Analyze requirements and create necessary technical design documents",
		"step3": "Design comprehensive integration and E2E testing plan based on user journey, requirements and technical architecture"
	},
	"expectedDeliverables": {
		"prerequisites": ["Team member must be selected before starting workflow"],
		"step1": [
			"project.md - Comprehensive Product Requirements Document (PRD)",
			"Includes business requirements, functional specs, technical constraints, and success metrics"
		],
		"step2": [
			"2-4 technical design documents based on project needs",
			"Examples: frontend_design.md, backend_design.md, api_design.md, database_design.md",
			"Each document includes architecture, implementation strategy, security, and performance considerations"
		],
		"step3": [
			"integration_tests.md - Comprehensive integration and E2E testing plan",
			"Covers user journey-based E2E tests, system integration, API, database, external system, performance, and security tests",
			"Includes specific testing technology recommendations (Playwright, Cypress, etc.) and test automation strategy",
			"TPM tmux session will evaluate and execute the testing plan"
		],
		"notes": [
			"User selects appropriate team member before starting workflow",
			"All steps send messages directly to selected team member's tmux session",
			"Each step includes verification criteria to ensure quality and completeness",
			"Steps are conditional - each depends on successful completion of the previous step",
			"Selected team member analyzes project requirements and creates appropriate specifications",
			"Workflow is streamlined into three focused phases for better organization and quality",
			"These specifications enable the subsequent creation of milestone-based development tasks",
			"The task creation workflow will organize tasks in milestone folders with open/in_progress/blocked/done subfolders"
		]
	}
}
