{
  "name": "Build E2E Test Plan",
  "description": "Generate comprehensive E2E testing tasks based on user journey and project analysis",
  "steps": [
    {
      "id": 1,
      "name": "Analyze Project for E2E Testing Strategy",
      "targetRole": "qa",
      "delayMinutes": 3,
      "verification": {
        "type": "files_exist",
        "paths": [
          "{PROJECT_PATH}/.agentmux/tasks/m0_defining_project/open"
        ]
      },
      "prompts": [
        "E2E TEST PLAN GENERATION - STEP 1",
        "Project: {PROJECT_NAME}",
        "Path: {PROJECT_PATH}",
        "",
        "PROJECT GOAL:",
        "{INITIAL_GOAL}",
        "",
        "USER JOURNEY:",
        "{USER_JOURNEY}",
        "",
        "## Task: Analyze Project Type and Choose E2E Testing Technology",
        "",
        "### Step 1: Project Analysis",
        "Review the project specifications and codebase structure to understand:",
        "",
        "1. **Project Type Identification**:",
        "   - Examine {PROJECT_PATH}/.agentmux/specs/project.md for technology details",
        "   - Scan the project structure to identify the platform/framework",
        "   - Determine if this is: Web App, Mobile App (iOS/Android), Desktop App, API/Backend, or Hybrid",
        "",
        "2. **Technology Stack Analysis**:",
        "   - Frontend framework (React, Vue, Angular, Flutter, React Native, etc.)",
        "   - Backend technology (Node.js, Python, Java, .NET, etc.)", 
        "   - Database and external integrations",
        "   - Deployment target (web browser, mobile device, desktop OS)",
        "",
        "### Step 2: E2E Testing Technology Selection",
        "Based on your analysis, recommend the most appropriate E2E testing framework:",
        "",
        "**For Web Applications:**",
        "- Playwright (modern, cross-browser, robust)",
        "- Cypress (developer-friendly, real browser testing)",
        "- Selenium WebDriver (mature, wide browser support)",
        "",
        "**For Mobile Applications:**",
        "- iOS: XCUITest (native), Detox (React Native), Appium (cross-platform)",
        "- Android: Espresso (native), UIAutomator, Appium (cross-platform)",
        "- Flutter: Flutter Driver, Patrol",
        "",
        "**For Desktop Applications:**",
        "- Electron apps: Playwright, Spectron",
        "- Native desktop: platform-specific tools (WinAppDriver, etc.)",
        "",
        "**For APIs:**",
        "- Postman/Newman, REST Assured, Supertest",
        "",
        "### Step 3: User Journey E2E Test Mapping",
        "Create a comprehensive test strategy covering:",
        "",
        "1. **Critical User Paths**: Main flows from user journey",
        "2. **Integration Points**: External APIs, payment systems, authentication",
        "3. **Cross-Device/Browser Testing**: If applicable",
        "4. **Data Management**: Test data setup, cleanup, state management",
        "5. **Error Scenarios**: Network failures, invalid inputs, edge cases",
        "",
        "**Create your analysis and technology recommendation document in:**",
        "`{PROJECT_PATH}/.agentmux/tasks/m0_defining_project/open/03_e2e_test_strategy_qa.md`"
      ]
    },
    {
      "id": 2,
      "name": "Generate Detailed E2E Test Implementation Plan",
      "targetRole": "qa",
      "delayMinutes": 5,
      "conditional": "only_if_strategy_document_exists",
      "verification": {
        "type": "files_exist",
        "paths": [
          "{PROJECT_PATH}/.agentmux/tasks/m0_defining_project/open/04_e2e_test_implementation_qa.md"
        ]
      },
      "prompts": [
        "E2E TEST PLAN GENERATION - STEP 2",
        "",
        "## Task: Create Comprehensive E2E Test Implementation Plan",
        "",
        "Based on your technology selection from Step 1, create a detailed implementation plan.",
        "",
        "### Implementation Structure",
        "Create the following task files in `{PROJECT_PATH}/.agentmux/tasks/m0_defining_project/open/`:",
        "",
        "**File: `04_e2e_test_implementation_qa.md`**",
        "Include the following sections:",
        "",
        "## Objective",
        "Implement comprehensive E2E testing suite using [your selected technology] for [project type]",
        "",
        "## Technology Setup",
        "- **Primary Framework**: [Your chosen framework and version]",
        "- **Additional Tools**: [Page Object Model, test runners, reporting tools]",
        "- **CI/CD Integration**: [How tests will run in pipeline]",
        "",
        "## Test Architecture",
        "- **Project Structure**: Test file organization",
        "- **Page Objects/Screen Objects**: Abstraction layer for UI elements",
        "- **Test Data Management**: How to handle test data, fixtures, mocks",
        "- **Environment Configuration**: Dev, staging, prod test environments",
        "",
        "## User Journey Test Cases",
        "Map each step from the user journey to specific test scenarios:",
        "",
        "### Test Case 1: [Primary User Flow]",
        "- **Scenario**: [Description]",
        "- **Steps**: [Detailed test steps]",
        "- **Expected Results**: [What should happen]",
        "- **Test Data**: [Required data setup]",
        "",
        "### Test Case 2: [Secondary User Flow]",
        "- **Scenario**: [Description]",
        "- **Steps**: [Detailed test steps]", 
        "- **Expected Results**: [What should happen]",
        "- **Test Data**: [Required data setup]",
        "",
        "[Continue for all major user flows...]",
        "",
        "## Error & Edge Case Testing",
        "- **Network Failures**: Offline scenarios, API timeouts",
        "- **Invalid Input Handling**: Form validation, data corruption",
        "- **Authentication Issues**: Login failures, session expiry",
        "- **Browser/Device Compatibility**: Cross-platform testing",
        "",
        "## Test Execution Strategy",
        "- **Local Development**: How developers run tests",
        "- **CI/CD Pipeline**: Automated test execution",
        "- **Reporting**: Test results, screenshots, videos on failure",
        "- **Maintenance**: Keeping tests updated with code changes",
        "",
        "## Acceptance Criteria",
        "- [ ] E2E testing framework installed and configured",
        "- [ ] All critical user journeys covered by automated tests",
        "- [ ] Page object models created for UI abstraction",
        "- [ ] Test data management system implemented",
        "- [ ] CI/CD integration completed",
        "- [ ] Error scenarios and edge cases tested",
        "- [ ] Test execution and reporting pipeline working",
        "",
        "## Definition of Done",
        "- [ ] Complete test suite covers 90%+ of user journey scenarios",
        "- [ ] Tests run reliably in CI/CD pipeline",
        "- [ ] Test failures provide clear, actionable feedback",
        "- [ ] Documentation created for maintaining and extending tests",
        "- [ ] Team trained on running and writing E2E tests",
        "",
        "**Focus on creating tests that provide confidence in the complete user experience, not just individual components.**"
      ]
    }
  ],
  "workflow": {
    "step1": "Analyze project type and technology stack, select appropriate E2E testing framework",
    "step2": "Create detailed test implementation plan with user journey mapping and technical architecture"
  },
  "expectedDeliverables": {
    "prerequisites": ["User journey must exist in .agentmux/specs/initial_user_journey.md"],
    "step1": [
      "Project type identification document",
      "E2E testing technology recommendation with justification",
      "Test strategy overview covering critical user paths"
    ],
    "step2": [
      "Detailed E2E test implementation plan",
      "User journey to test case mapping", 
      "Technical architecture for test framework",
      "CI/CD integration strategy",
      "Test maintenance and execution procedures"
    ],
    "quality_standards": [
      "Technology selection justified by project analysis",
      "Test strategy covers complete user experience",
      "Implementation plan is detailed enough for autonomous execution",
      "Error scenarios and edge cases addressed"
    ],
    "notes": [
      "QA should analyze actual project structure and specifications",
      "Technology choice should be optimized for the specific project type",
      "Tests should focus on user value, not just technical coverage",
      "Implementation should be maintainable and reliable in CI/CD"
    ]
  }
}