import { Request, Response } from 'express';
import { StorageService, TmuxService, SchedulerService, MessageSchedulerService } from '../services/index.js';
export declare class ApiController {
    private storageService;
    private tmuxService;
    private schedulerService;
    private messageSchedulerService?;
    private taskService;
    private taskTrackingService;
    private taskFolderService;
    private activeProjectsService;
    constructor(storageService: StorageService, tmuxService: TmuxService, schedulerService: SchedulerService, messageSchedulerService?: MessageSchedulerService | undefined);
    createTeam(req: Request, res: Response): Promise<void>;
    getTeams(req: Request, res: Response): Promise<void>;
    updateTeamStatus(req: Request, res: Response): Promise<void>;
    getTeam(req: Request, res: Response): Promise<void>;
    startTeam(req: Request, res: Response): Promise<void>;
    stopTeam(req: Request, res: Response): Promise<void>;
    getTeamWorkload(req: Request, res: Response): Promise<void>;
    deleteTeam(req: Request, res: Response): Promise<void>;
    getTeamMemberSession(req: Request, res: Response): Promise<void>;
    getAlignmentStatus(req: Request, res: Response): Promise<void>;
    continueWithMisalignment(req: Request, res: Response): Promise<void>;
    getBuildSpecConfig(req: Request, res: Response): Promise<void>;
    retryBuildSpecStep(req: Request, res: Response): Promise<void>;
    getBuildTaskConfig(req: Request, res: Response): Promise<void>;
    getProjectTasksStatus(req: Request, res: Response): Promise<void>;
    retryBuildTaskStep(req: Request, res: Response): Promise<void>;
    assignTask(req: Request, res: Response): Promise<void>;
    completeTask(req: Request, res: Response): Promise<void>;
    blockTask(req: Request, res: Response): Promise<void>;
    takeNextTask(req: Request, res: Response): Promise<void>;
    syncTaskStatus(req: Request, res: Response): Promise<void>;
    createTasksFromConfig(req: Request, res: Response): Promise<void>;
    getTeamProgress(req: Request, res: Response): Promise<void>;
    createProject(req: Request, res: Response): Promise<void>;
    getProjects(req: Request, res: Response): Promise<void>;
    getProject(req: Request, res: Response): Promise<void>;
    assignTeamsToProject(req: Request, res: Response): Promise<void>;
    unassignTeamFromProject(req: Request, res: Response): Promise<void>;
    getProjectStatus(req: Request, res: Response): Promise<void>;
    getProjectFiles(req: Request, res: Response): Promise<void>;
    private getFileIcon;
    private countFiles;
    getProjectCompletion(req: Request, res: Response): Promise<void>;
    deleteProject(req: Request, res: Response): Promise<void>;
    scheduleCheck(req: Request, res: Response): Promise<void>;
    getScheduledChecks(req: Request, res: Response): Promise<void>;
    cancelScheduledCheck(req: Request, res: Response): Promise<void>;
    listTerminalSessions(req: Request, res: Response): Promise<void>;
    captureTerminal(req: Request, res: Response): Promise<void>;
    sendTerminalInput(req: Request, res: Response): Promise<void>;
    sendTerminalKey(req: Request, res: Response): Promise<void>;
    getFileContent(req: Request, res: Response): Promise<void>;
    getAgentmuxMarkdownFiles(req: Request, res: Response): Promise<void>;
    saveMarkdownFile(req: Request, res: Response): Promise<void>;
    startProject(req: Request, res: Response): Promise<void>;
    stopProject(req: Request, res: Response): Promise<void>;
    restartProject(req: Request, res: Response): Promise<void>;
    private buildProjectContextMessage;
    getAssignments(req: Request, res: Response): Promise<void>;
    updateAssignment(req: Request, res: Response): Promise<void>;
    getOrchestratorCommands(req: Request, res: Response): Promise<void>;
    executeOrchestratorCommand(req: Request, res: Response): Promise<void>;
    sendOrchestratorMessage(req: Request, res: Response): Promise<void>;
    sendOrchestratorEnter(req: Request, res: Response): Promise<void>;
    createTicket(req: Request, res: Response): Promise<void>;
    getTickets(req: Request, res: Response): Promise<void>;
    getTicket(req: Request, res: Response): Promise<void>;
    updateTicket(req: Request, res: Response): Promise<void>;
    deleteTicket(req: Request, res: Response): Promise<void>;
    addSubtask(req: Request, res: Response): Promise<void>;
    toggleSubtask(req: Request, res: Response): Promise<void>;
    createTicketTemplate(req: Request, res: Response): Promise<void>;
    getTicketTemplates(req: Request, res: Response): Promise<void>;
    getTicketTemplate(req: Request, res: Response): Promise<void>;
    getProjectContext(req: Request, res: Response): Promise<void>;
    generateMemberContext(req: Request, res: Response): Promise<void>;
    injectContextIntoSession(req: Request, res: Response): Promise<void>;
    refreshMemberContext(req: Request, res: Response): Promise<void>;
    getGitStatus(req: Request, res: Response): Promise<void>;
    commitChanges(req: Request, res: Response): Promise<void>;
    startAutoCommit(req: Request, res: Response): Promise<void>;
    stopAutoCommit(req: Request, res: Response): Promise<void>;
    getCommitHistory(req: Request, res: Response): Promise<void>;
    createBranch(req: Request, res: Response): Promise<void>;
    createPullRequest(req: Request, res: Response): Promise<void>;
    getSystemHealth(req: Request, res: Response): Promise<void>;
    getSystemMetrics(req: Request, res: Response): Promise<void>;
    getSystemConfiguration(req: Request, res: Response): Promise<void>;
    updateSystemConfiguration(req: Request, res: Response): Promise<void>;
    getSystemLogs(req: Request, res: Response): Promise<void>;
    getAlerts(req: Request, res: Response): Promise<void>;
    updateAlertCondition(req: Request, res: Response): Promise<void>;
    createDefaultConfig(req: Request, res: Response): Promise<void>;
    healthCheck(req: Request, res: Response): Promise<void>;
    getClaudeStatus(req: Request, res: Response): Promise<void>;
    getWorkflowExecution(req: Request, res: Response): Promise<void>;
    getActiveWorkflows(req: Request, res: Response): Promise<void>;
    cancelWorkflowExecution(req: Request, res: Response): Promise<void>;
    trackError(req: Request, res: Response): Promise<void>;
    getErrorStats(req: Request, res: Response): Promise<void>;
    getErrors(req: Request, res: Response): Promise<void>;
    getError(req: Request, res: Response): Promise<void>;
    clearErrors(req: Request, res: Response): Promise<void>;
    createScheduledMessage(req: Request, res: Response): Promise<void>;
    getScheduledMessages(req: Request, res: Response): Promise<void>;
    getScheduledMessage(req: Request, res: Response): Promise<void>;
    updateScheduledMessage(req: Request, res: Response): Promise<void>;
    deleteScheduledMessage(req: Request, res: Response): Promise<void>;
    toggleScheduledMessage(req: Request, res: Response): Promise<void>;
    runScheduledMessage(req: Request, res: Response): Promise<void>;
    getDeliveryLogs(req: Request, res: Response): Promise<void>;
    clearDeliveryLogs(req: Request, res: Response): Promise<void>;
    getProjectStats(req: Request, res: Response): Promise<void>;
    getProjectSpecsStatus(req: Request, res: Response): Promise<void>;
    openProjectInFinder(req: Request, res: Response): Promise<void>;
    createSpecFile(req: Request, res: Response): Promise<void>;
    getSpecFileContent(req: Request, res: Response): Promise<void>;
    getConfigFile(req: Request, res: Response): Promise<void>;
    private determineTPMNextStep;
    /**
     * Build the appropriate message for TPM based on the next step
     */
    private buildTPMStepMessage;
    getAllTasks(req: Request, res: Response): Promise<void>;
    getMilestones(req: Request, res: Response): Promise<void>;
    getTasksByStatus(req: Request, res: Response): Promise<void>;
    getTasksByMilestone(req: Request, res: Response): Promise<void>;
}
//# sourceMappingURL=api.controller.d.ts.map